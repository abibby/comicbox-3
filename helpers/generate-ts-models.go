package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"reflect"
	"sort"
	"strings"

	"github.com/abibby/comicbox-3/models"
)

var types = map[string]string{
	"UUID":    "string",
	"Time":    "string",
	"string":  "string",
	"Float64": "number",
	"float64": "number",
	"Int":     "number",
	"int":     "number",
	"int64":   "number",
	"String":  "string",
	"bool":    "boolean",
}

func main() {
	m := []interface{}{
		models.Book{},
		models.Page{},
		models.Series{},
		models.User{},
		models.UserBook{},
		models.UserSeries{},
	}
	enums := []models.Enum{
		models.PageType(""),
		models.List(""),
	}
	ts := "// This file is autogenerated do not edit it\n/* eslint-disable */\n\n"
	for _, model := range m {
		ts += generateTsInterface(model)
	}
	for _, model := range enums {
		ts += generateTsEnum(model)
	}

	ioutil.WriteFile("./ui/src/models.ts", []byte(ts), 0644)
}

func generateTsInterface(model interface{}) string {
	t := reflect.TypeOf(model)

	ts := "export interface " + t.Name() + " {"
	ts += generateTsInterfaceProps(t)
	return ts + "\n}\n"
}

func generateTsInterfaceProps(t reflect.Type) string {
	ts := ""
	for i := 0; i < t.NumField(); i++ {
		v := t.Field(i)
		if v.Anonymous {
			ts += generateTsInterfaceProps(v.Type)
		}
		name, ok := v.Tag.Lookup("json")
		if !ok || name == "-" {
			continue
		}
		ts += "\n    " + name + ": " + generateTsType(v.Type, true)
	}
	return ts
}

func generateTsType(t reflect.Type, allowNull bool) string {
	tsType, ok := types[t.Name()]
	if ok {
		return tsType
	}
	if t.Kind() == reflect.Slice {
		return "Array<" + generateTsType(t.Elem(), false) + ">"
	}
	if t.Kind() == reflect.Map {
		return fmt.Sprintf("Record<%s, %s>", generateTsType(t.Key(), false), generateTsType(t.Elem(), false))
	}
	if t.Name() == "" {
		suffix := ""
		if allowNull {
			suffix = " | null"
		}
		return generateTsType(t.Elem(), false) + suffix
	}
	return t.Name()
}

func generateTsEnum(model models.Enum) string {
	t := reflect.TypeOf(model)

	optionLines := []string{}

	for name, value := range model.Options() {
		b, err := json.Marshal(value)
		if err != nil {
			panic(err)
		}
		optionLines = append(optionLines, "\n    "+name+" = "+string(b)+",")
	}

	sort.Sort(sort.StringSlice(optionLines))

	return "export enum " + t.Name() + " {" +
		strings.Join(optionLines, "") +
		"\n}\n"
}
