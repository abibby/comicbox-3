package main

import (
	"fmt"
	"io/ioutil"
	"reflect"

	"github.com/abibby/comicbox-3/models"
)

var types = map[string]string{
	"UUID":     "string",
	"Time":     "string",
	"string":   "string",
	"Float64":  "number",
	"float64":  "number",
	"Int":      "number",
	"int":      "number",
	"String":   "string",
	"PageType": fmt.Sprintf(`"%s" | "%s" | "%s"`, models.FrontCover, models.Story, models.Deleted),
}

func main() {
	m := []interface{}{
		models.Book{},
		models.Page{},
		models.Series{},
		models.User{},
		models.UserBook{},
		models.UserSeries{},
	}
	ts := "// This file is autogenerated do not edit it\n/* eslint-disable */\n\n"
	for _, model := range m {
		ts += generateTsInterface(model)
	}

	ioutil.WriteFile("./ui/src/models.ts", []byte(ts), 0644)
}

func generateTsInterface(model interface{}) string {
	t := reflect.TypeOf(model)

	ts := "export interface " + t.Name() + " {"
	for i := 0; i < t.NumField(); i++ {
		v := t.Field(i)
		name, ok := v.Tag.Lookup("json")
		if !ok || name == "-" {
			continue
		}
		ts += "\n    " + name + ": " + generateTsType(v.Type, true)
	}
	return ts + "\n}\n"
}

func generateTsType(t reflect.Type, allowNull bool) string {
	tsType, ok := types[t.Name()]
	if ok {
		return tsType
	}
	if t.Kind() == reflect.Slice {
		return "Array<" + generateTsType(t.Elem(), false) + ">"
	}
	if t.Name() == "" {
		suffix := ""
		if allowNull {
			suffix = " | null"
		}
		return generateTsType(t.Elem(), false) + suffix
	}
	return t.Name()
}
