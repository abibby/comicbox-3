// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package anilist

import (
	"context"

	"github.com/Khan/genqlient/graphql"
)

// SearchPage includes the requested fields of the GraphQL type Page.
// The GraphQL type's documentation follows.
//
// Page of data
type SearchPage struct {
	// The pagination information
	PageInfo SearchPagePageInfo `json:"pageInfo"`
	Media    []SearchPageMedia  `json:"media"`
}

// GetPageInfo returns SearchPage.PageInfo, and is useful for accessing the field via an interface.
func (v *SearchPage) GetPageInfo() SearchPagePageInfo { return v.PageInfo }

// GetMedia returns SearchPage.Media, and is useful for accessing the field via an interface.
func (v *SearchPage) GetMedia() []SearchPageMedia { return v.Media }

// SearchPageMedia includes the requested fields of the GraphQL type Media.
// The GraphQL type's documentation follows.
//
// Anime or Manga
type SearchPageMedia struct {
	// The id of the media
	Id int `json:"id"`
	// The official titles of the media in various languages
	Title SearchPageMediaTitle `json:"title"`
	// Alternative titles of the media
	Synonyms []string `json:"synonyms"`
	// The cover images of the media
	CoverImage SearchPageMediaCoverImage `json:"coverImage"`
	// The first official release date of the media
	StartDate SearchPageMediaStartDateFuzzyDate `json:"startDate"`
	// Short description of the media's story and characters
	Description string `json:"description"`
	// The genres of the media
	Genres []string `json:"genres"`
	// List of tags that describes elements and themes of the media
	Tags []SearchPageMediaTagsMediaTag `json:"tags"`
	// The staff who produced the media
	Staff SearchPageMediaStaffStaffConnection `json:"staff"`
}

// GetId returns SearchPageMedia.Id, and is useful for accessing the field via an interface.
func (v *SearchPageMedia) GetId() int { return v.Id }

// GetTitle returns SearchPageMedia.Title, and is useful for accessing the field via an interface.
func (v *SearchPageMedia) GetTitle() SearchPageMediaTitle { return v.Title }

// GetSynonyms returns SearchPageMedia.Synonyms, and is useful for accessing the field via an interface.
func (v *SearchPageMedia) GetSynonyms() []string { return v.Synonyms }

// GetCoverImage returns SearchPageMedia.CoverImage, and is useful for accessing the field via an interface.
func (v *SearchPageMedia) GetCoverImage() SearchPageMediaCoverImage { return v.CoverImage }

// GetStartDate returns SearchPageMedia.StartDate, and is useful for accessing the field via an interface.
func (v *SearchPageMedia) GetStartDate() SearchPageMediaStartDateFuzzyDate { return v.StartDate }

// GetDescription returns SearchPageMedia.Description, and is useful for accessing the field via an interface.
func (v *SearchPageMedia) GetDescription() string { return v.Description }

// GetGenres returns SearchPageMedia.Genres, and is useful for accessing the field via an interface.
func (v *SearchPageMedia) GetGenres() []string { return v.Genres }

// GetTags returns SearchPageMedia.Tags, and is useful for accessing the field via an interface.
func (v *SearchPageMedia) GetTags() []SearchPageMediaTagsMediaTag { return v.Tags }

// GetStaff returns SearchPageMedia.Staff, and is useful for accessing the field via an interface.
func (v *SearchPageMedia) GetStaff() SearchPageMediaStaffStaffConnection { return v.Staff }

// SearchPageMediaCoverImage includes the requested fields of the GraphQL type MediaCoverImage.
type SearchPageMediaCoverImage struct {
	// The cover image url of the media at its largest size. If this size isn't available, large will be provided instead.
	ExtraLarge string `json:"extraLarge"`
}

// GetExtraLarge returns SearchPageMediaCoverImage.ExtraLarge, and is useful for accessing the field via an interface.
func (v *SearchPageMediaCoverImage) GetExtraLarge() string { return v.ExtraLarge }

// SearchPageMediaStaffStaffConnection includes the requested fields of the GraphQL type StaffConnection.
type SearchPageMediaStaffStaffConnection struct {
	Edges []SearchPageMediaStaffStaffConnectionEdgesStaffEdge `json:"edges"`
}

// GetEdges returns SearchPageMediaStaffStaffConnection.Edges, and is useful for accessing the field via an interface.
func (v *SearchPageMediaStaffStaffConnection) GetEdges() []SearchPageMediaStaffStaffConnectionEdgesStaffEdge {
	return v.Edges
}

// SearchPageMediaStaffStaffConnectionEdgesStaffEdge includes the requested fields of the GraphQL type StaffEdge.
// The GraphQL type's documentation follows.
//
// Staff connection edge
type SearchPageMediaStaffStaffConnectionEdgesStaffEdge struct {
	// The role of the staff member in the production of the media
	Role string                                                     `json:"role"`
	Node SearchPageMediaStaffStaffConnectionEdgesStaffEdgeNodeStaff `json:"node"`
}

// GetRole returns SearchPageMediaStaffStaffConnectionEdgesStaffEdge.Role, and is useful for accessing the field via an interface.
func (v *SearchPageMediaStaffStaffConnectionEdgesStaffEdge) GetRole() string { return v.Role }

// GetNode returns SearchPageMediaStaffStaffConnectionEdgesStaffEdge.Node, and is useful for accessing the field via an interface.
func (v *SearchPageMediaStaffStaffConnectionEdgesStaffEdge) GetNode() SearchPageMediaStaffStaffConnectionEdgesStaffEdgeNodeStaff {
	return v.Node
}

// SearchPageMediaStaffStaffConnectionEdgesStaffEdgeNodeStaff includes the requested fields of the GraphQL type Staff.
// The GraphQL type's documentation follows.
//
// Voice actors or production staff
type SearchPageMediaStaffStaffConnectionEdgesStaffEdgeNodeStaff struct {
	// The names of the staff member
	Name SearchPageMediaStaffStaffConnectionEdgesStaffEdgeNodeStaffName `json:"name"`
}

// GetName returns SearchPageMediaStaffStaffConnectionEdgesStaffEdgeNodeStaff.Name, and is useful for accessing the field via an interface.
func (v *SearchPageMediaStaffStaffConnectionEdgesStaffEdgeNodeStaff) GetName() SearchPageMediaStaffStaffConnectionEdgesStaffEdgeNodeStaffName {
	return v.Name
}

// SearchPageMediaStaffStaffConnectionEdgesStaffEdgeNodeStaffName includes the requested fields of the GraphQL type StaffName.
// The GraphQL type's documentation follows.
//
// The names of the staff member
type SearchPageMediaStaffStaffConnectionEdgesStaffEdgeNodeStaffName struct {
	// The person's first and last name
	Full string `json:"full"`
}

// GetFull returns SearchPageMediaStaffStaffConnectionEdgesStaffEdgeNodeStaffName.Full, and is useful for accessing the field via an interface.
func (v *SearchPageMediaStaffStaffConnectionEdgesStaffEdgeNodeStaffName) GetFull() string {
	return v.Full
}

// SearchPageMediaStartDateFuzzyDate includes the requested fields of the GraphQL type FuzzyDate.
// The GraphQL type's documentation follows.
//
// Date object that allows for incomplete date values (fuzzy)
type SearchPageMediaStartDateFuzzyDate struct {
	// Numeric Year (2017)
	Year int `json:"year"`
}

// GetYear returns SearchPageMediaStartDateFuzzyDate.Year, and is useful for accessing the field via an interface.
func (v *SearchPageMediaStartDateFuzzyDate) GetYear() int { return v.Year }

// SearchPageMediaTagsMediaTag includes the requested fields of the GraphQL type MediaTag.
// The GraphQL type's documentation follows.
//
// A tag that describes a theme or element of the media
type SearchPageMediaTagsMediaTag struct {
	// The name of the tag
	Name string `json:"name"`
}

// GetName returns SearchPageMediaTagsMediaTag.Name, and is useful for accessing the field via an interface.
func (v *SearchPageMediaTagsMediaTag) GetName() string { return v.Name }

// SearchPageMediaTitle includes the requested fields of the GraphQL type MediaTitle.
// The GraphQL type's documentation follows.
//
// The official titles of the media in various languages
type SearchPageMediaTitle struct {
	// The romanization of the native language title
	Romaji string `json:"romaji"`
	// The official english title
	English string `json:"english"`
}

// GetRomaji returns SearchPageMediaTitle.Romaji, and is useful for accessing the field via an interface.
func (v *SearchPageMediaTitle) GetRomaji() string { return v.Romaji }

// GetEnglish returns SearchPageMediaTitle.English, and is useful for accessing the field via an interface.
func (v *SearchPageMediaTitle) GetEnglish() string { return v.English }

// SearchPagePageInfo includes the requested fields of the GraphQL type PageInfo.
type SearchPagePageInfo struct {
	// The total number of items. Note: This value is not guaranteed to be accurate, do not rely on this for logic
	Total int `json:"total"`
}

// GetTotal returns SearchPagePageInfo.Total, and is useful for accessing the field via an interface.
func (v *SearchPagePageInfo) GetTotal() int { return v.Total }

// SearchResponse is returned by Search on success.
type SearchResponse struct {
	Page SearchPage `json:"Page"`
}

// GetPage returns SearchResponse.Page, and is useful for accessing the field via an interface.
func (v *SearchResponse) GetPage() SearchPage { return v.Page }

// __SearchInput is used internally by genqlient
type __SearchInput struct {
	Search string `json:"search,omitempty"`
	Id     int    `json:"id,omitempty"`
}

// GetSearch returns __SearchInput.Search, and is useful for accessing the field via an interface.
func (v *__SearchInput) GetSearch() string { return v.Search }

// GetId returns __SearchInput.Id, and is useful for accessing the field via an interface.
func (v *__SearchInput) GetId() int { return v.Id }

// The query executed by Search.
const Search_Operation = `
query Search ($search: String, $id: Int) {
	Page(perPage: 50) {
		pageInfo {
			total
		}
		media(type: MANGA, format: MANGA, search: $search, id: $id) {
			id
			title {
				romaji
				english
			}
			synonyms
			coverImage {
				extraLarge
			}
			startDate {
				year
			}
			description(asHtml: true)
			genres
			tags {
				name
			}
			staff {
				edges {
					role
					node {
						name {
							full
						}
					}
				}
			}
		}
	}
}
`

func Search(
	ctx_ context.Context,
	client_ graphql.Client,
	search string,
	id int,
) (data_ *SearchResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "Search",
		Query:  Search_Operation,
		Variables: &__SearchInput{
			Search: search,
			Id:     id,
		},
	}

	data_ = &SearchResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}
